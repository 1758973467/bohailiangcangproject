注释式SpringMVC流程
DispatcherServlet 前端控制器，用于接受请求
HandlerMapping	接口 用于处理映射
DefaultAnnotationHandlerMapping HandlerMapping接口实现，用于把一个URL映射到具体的Controller类上。
HandlerAdapter 接口	用于处理请求的映射
AnnotationMethodHandlerAdapter HandlerAdapter接口的实现，用于将一个URL映射到对应的Controller类的某个方法上
ViewResolver 接口 用于解析View
InternalResourceViewResolver :ViewResolver接口的实现，用于将ModelAndView逻辑视图解析为具体的View

URL请求到action的映射规则
@RequestMapping(value="",params,  method=)
value
	@RequestMapping(value={"/index", "/hello"})
	该action匹配/index ,/hello

	URL请求参数
	@RequestMapping(value="/detail/{id}")
	value="detail/{id}"中的{id}为占位符表示可以映射请求为/detail/123

	方法的参数@PathVariable(value="id")Integer uid用于将URL占位符所对应变量映射到参数uid上

	URL通配符映射
	? 表示一个字符 * 表示多个字符 **匹配0或多个路径
	URL正则表达式
params
	指定映射请求必须包含某参数
	@RequestMapping(value="/paramtest",params="example")
	URL http://localhost:8080/helloworld/paramtest?example
	某参数必须等于某个值
	params="example=AAA"
	URL http://localhost:8080/helloworld/paramtest?example=AAA
	
绑定数据
	Model数据是request级别
	绑定数据注解
	@RequestParam 	绑定单个请求数据，URL数据/表单提交数据/上传文件
	文件绑定 commons-fileupload，commons-io 两个包
	@RequestParam(value="userbname",required=true,defaultValue="AAA")
	绑定请求的参数名称
	@PathVariable 	绑定URL模板值
	@CookieValue  	绑定Cookie数据
	与@RequestParam参数相同
	@RequestHeader	绑定请求头数据
	@ModelAttribute	数据->Model
	
	@SessionAttribute 数据->Session
	@RequestBody	用来处理Content-Type不是applicaiton/x-www-form-urlencoded编码的内容
	例如application/json,applicaiton/xml等
	@RequestPart	绑定multipart/data数据，并可以根据数据类型转换
	
	自动绑定
	
	@RequestMapping(value="/modelautobind", method = {RequestMethod.GET})
	public String modelAutoBind(HttpServletRequest request, Model model){
		
		model.addAttribute("accountmodel", new AccountModel());
		return "modelautobind";
	}

	@RequestMapping(value="/modelautobind", method = {RequestMethod.POST})
	public String modelAutoBind(HttpServletRequest request, Model model, AccountModel accountModel){
		//aountmodel这里是绑定好的数据
		model.addAttribute("accountmodel", accountModel);
		return "modelautobindresult";
	}
	
	 <form:form modelAttribute="accountmodel" method="post">     
        用户名：<form:input path="username"/><br/>
        密 码：<form:password path="password"/><br/>
        <input type="submit" value="Submit" />
    </form:form>

数据验证
绑定数据的验证


注解格式化

Spring内置类
NumberFormat 	Number -String
CurrencyFormat	Number -String 带货币符号
PrecentFormat	Number -String 带百分数符号
DateFormatter	Date-String
NumberFormatAnnotationFormatterFactory	
	@NumberFormat 注解 指定style.Number/Currency/Precent pattern="#.##"(保留两位小数) pattern会覆盖掉style
JodaDateTImeFormatAnnotationFormatterFactory
	@DateTimeFormat Date,Calendar,Long,Joda

	在jsp页面上<spring:eval 来绑定显示的值


国际化
<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <!-- 国际化信息所在的文件名 -->                     
    <property name="basename" value="messages" />   
    <!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  -->               
    <property name="useCodeAsDefaultMessage" value="true" />           
</bean>
基于session
<mvc:interceptors>  
    <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --> 
    <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />  
</mvc:interceptors>  

<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
权限管理

异常处理
	1 继承HandlerExceptionResolver 接口 并在配置文件
	<bean id="exceptionResolver" class="所在包名.MyHandlerExceptionResolver"/>
	2 使用注解 @ExceptionHandler
	建立自己的
	public abstract class BaseController {  

    @ExceptionHandler
    public String exception(HttpServletRequest request, Exception e) {  
          
　　　   //添加自己的异常处理逻辑，如日志记录　　　
        request.setAttribute("exceptionMessage", e.getMessage());  
          
        // 根据不同的异常类型进行不同处理
        if(e instanceof SQLException) 
            return "testerror";   
        else
            return "error";  
    }  
    
}

public class HelloWorldController extends BaseController{
    //...内容省略
}

这样 HelloWorldController 抛出异常时便会进入BaseController类的异常处理
	

	