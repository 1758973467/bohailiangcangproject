Spring aop
什么是AOP即实现方式
AOP基本概念
Spring中的AOP
Schema-based AOP
Spring AOP API
AspectJ

AOP aspect oriented Programming的缩写，意为面向切面的编程，通过预编译方式和运行期动态代理实现程序的统一维护的一种技术

功能:日志记录，性能统计，安全控制，事务处理，异常处理

实现方式
预编译 AspectJ
运行期动态代理(JDK动态代理，CGLib动态代理) SpringAOP,JBossAOP

JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理
cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强。
但因为采用的是继承，所以不能对final修饰的类进行代理。 
CGLIB是一个强大的高性能的代码生成包。被广泛的许多AOP框架使用，如Spring的AOP和dynaop，为他们提供方法的interceptor(拦截)，最流行的是OR Mapping工具hibernate也是使用CGLIB来代理单端的single-ended（多对一和一对一）关联（对集合的延迟抓取是采用其他机制实现）。EsayMock和jMock是通过模仿（moke）对象来测试java代码的包。他们都是通过使用CGLIB来为那些没有接口的类创建模仿（moke）对象。


AOP概念

切面 (Aspect)一个关注点的模块化，这个关注点可能横切多个对象
连接点(JoinPoint) 程序执行过程中某个特定的点
通知(Advice) 在切面的某个特定的连接点上执行的动作
切入点(Pointcut) 匹配连接点的断言，在AOP中通知和一个切入点表达式关联
引入(Introduction)在不修改类代码的前提下，为类添加新的方法和属性
目标对象(Target Object)被一个或者多个切面所通知的对象
AOP代理(AOP Proxy)AOP框架创建的对象，用来实现切面契约(aspect contract)(包含通知方法执行等功能)
织入(Weaving)吧切面连接到其他应用程序类型或者对象上，并创建一个被通知的对象

Advice类型
Before advice
After returning advice
After throwing advice
After (finally) advice
Around Advice

SpringAOP 默认使用标准JsvaSE动态代理作为AOP代理，这使得任何接口都可以被代理
SpringAOP也可以使用CGLIB代理(如果一个业务对象并没有实现一个接口)

<aop:config>
pointcut,advisor,aspect 必须按照这个顺序进行声明
<sop:config>大量使用Spring的自动代理机制

声明切入点
execution(public * *(..))	执行所有public方法
execution(* set*(..))		执行所有set方法
execution(* com.xyz.service.AcountService.*(..))
执行AccountServicee类的所有方法
execution(* com.xyz.service..(..))
执行com.xyz.service包下所有方法时
execution(* com.xyz.service...(..))
执行com.xyz.service包及其子包所有方法时

<sop:config>
	<aop:aspect id="myAspect" ref="aBean">
		<aop:pointcut id="bussinessService'
		experssion ="execution(* com.xyz.service..(..))"/>
		
	</aop:aspect>
</aop:config>

advice通知
before
<sop:before pointcut-ref="" 
method="doAcessCheck"/>
after-returning
after-throwing
after 
around advice 环绕控制 public  void aroundadvice(ProceedingJoinPoint point) 否则不执行原方法
使用参数

public class SimpleProfiler {

    public Object profile(ProceedingJoinPoint call, String name, int age) throws Throwable {
        StopWatch clock = new StopWatch("Profiling for '" + name + "' and '" + age + "'");
        try {
            clock.start(call.toShortString());
            return call.proceed();
        } finally {
            clock.stop();
            System.out.println(clock.prettyPrint());
        }
    }
}
<!-- this is the actual advice itself -->
    <bean id="profiler" class="x.y.SimpleProfiler"/>

    <aop:config>
        <aop:aspect ref="profiler">

            <aop:pointcut id="theExecutionOfSomeFooServiceMethod"
                expression="execution(* x.y.service.FooService.getFoo(String,int))
                and args(name, age)"/>

            <aop:around pointcut-ref="theExecutionOfSomeFooServiceMethod"
                method="profile"/>

        </aop:aspect>
    </aop:config>
	
Introduction
简介允许一个切面声明一个实现指定接口的通知对象，并且提供了一个接口实现类来代表这些对象
<aop:aspect>中的<aop:declare-parents>元素声明该元素声明所匹配的类型拥有一个新的parent

注意：所有 schema-defined aspects只支持singleton model

Advisors



